use std::path::Path;
use crate::ast::*;
use crate::tokens::Token;
use crate::errors::{ LexicalError };


grammar<P>(file_name: &P) where P: AsRef<Path>;

Spanned<T>: (usize, usize) = {
    <@L> T <@R> => (<>)
};

pub File: File = {
	<body: Statement*> => File { body }
}

SimpleType: Type = {
	"string" => Type::String,
	"timestamp" => Type::Timestamp,
	"boolean" => Type::Boolean,
	"byte" => Type::Byte,
	"short" => Type::Short,
	"integer" => Type::Integer,
	"long" => Type::Long,
	"float" => Type::Float,
	"double" => Type::Double,
}



Statement: Statement = {
	<start:@L> "operation" <id:Ident> "{" <properties: Comma<Prop>> "}" <end:@R> => Statement::OperationDef { 
	  id, 
	  properties,
	  span: Span::new(file_name, start, end)
	},
	<start:@L> "struct" <id:Ident> "{" <properties: Comma<Prop>> "}" <end:@R> => Statement::StructDef { 
	  id, 
	  properties,
	  span: Span::new(file_name, start, end)
	},
	<start:@L> <_type: SimpleType> <id: Ident> <end: @R> => Statement::SimpleTypeDef { 
	  id, 
	  _type,
	  span: Span::new(file_name, start, end)
	},
}



Prop: Property = {
	<start: @L> <id:Ident>":"<value: Expr> <end: @R> => 
	  Property { 
	    id, 
	    value,
	    span: Span::new(file_name, start, end)
	  }
}

Ident: Identifier = {
	<start: @L> <name: "identifier"> <end: @R> => Identifier { name, span: Span::new(file_name, start, end)}
}

Expr: Expression = {
	<start: @L> "{" <properties: Comma<Prop>> "}" <end: @R> => 
	  Expression::ObjectExpression(
	    ObjectExpression { 
	      properties, 
	      span: Span::new(file_name, start, end)
	    }
	  ),
	<start: @L> <name: "identifier"> <end: @R> => Expression::Identifier(Identifier {
	  name,
	  span: Span::new(file_name, start, end),
	}),
	<start: @L> "[" <elements: Comma<Ident>> "]" <end: @R> => Expression::ArrayExpression(
	  ArrayExpression {
	    elements,
	    span: Span::new(file_name, start, end),
	  }
	),
	<start: @L> <val:"literal_int"> <end: @R> => Expression::Literal(Literal { 
	  value: LiteralType::Integer(val),
	  span: Span::new(file_name, start, end),
	}),
	<start: @L> <val:"literal_string"> <end: @R> => Expression::Literal(Literal { 
	  value: LiteralType::String(val),
	  span: Span::new(file_name, start, end),
	}),
	<start: @L> <val: "literal_float"> <end: @R> => Expression::Literal(Literal { 
	  value: LiteralType::Float(val),
	  span: Span::new(file_name, start, end),
	}),
}


Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};




extern {
	type Location = usize;
	type Error = LexicalError;
	enum Token {
	    "operation" => Token::KwOperation,
	    "import" => Token::KwImport,
	    "from" => Token::KwFrom,
	    "struct" => Token::KwStruct,
	    "string" => Token::KwString,
	    "timestamp" => Token::KwTimestamp,
	    "boolean" => Token::KwBoolean,
	    "byte" => Token::KwByte,
	    "short" => Token::KwShort,
	    "integer" => Token::KwInt,
	    "long" => Token::KwLong,
	    "float" => Token::KwFloat,
	    "double" => Token::KwDouble,
	    "{" => Token::LBrace,
	    "}" => Token::RBrace,
	    "[" => Token::LBracket,
	    "]" => Token::RBracket,
	    ":" => Token::Colon,
	    "," => Token::Comma,
	    "@" => Token::At,
	    "-" => Token::Dash,
	    "$" => Token::Dollar,
	    "identifier" => Token::Identifier(<String>),
	    "literal_int" => Token::Integer(<i64>),
	    "literal_string" => Token::String(<String>),
	    "literal_float" => Token::Float(<f64>),
	}
}
