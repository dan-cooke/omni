use omni_ast::{File, Def, Ident, Int, ValueDef, TypeDef, Type Value};


use crate::tokens::Token;
use crate::errors::{ LexicalError, Error };

use lalrpop_util::ParseError;


grammar;

pub OmniFile: File = {
	<defs: Def*> => File { imports: None, body: defs }
}



KwResourceOperation = {
	"create",
	"read",
	"update",
	"delete",
	"put",
}

Def: Def = {
	"service" <id:Ident> "{" <body: Comma<ValueDef>> "}" => 
		Def::Service {
			id,
			body: vec![],
		},

}

ResourceOperationDef: Def = {
	<kw: KwResourceOperation> <id: Ident> 
	"for" <resource: NestedIdents>
	<extends: Extends?>
	"{" <body: Comma<Prop>> "}" 
	=> Def::Service{ id, body: vec![]}


}

Extends: Ident = {
	"extends" <id: Ident> => id
}

Map: Value = {
	"{"<props: Comma<Prop>>"}" => Value::Map(<>),
}

Prop: Prop = {
	<key:"identifier">":"<val: Value> => Prop { key, value: val, decorators: None }
}

Value: Value = {
	Ident => Value::Identifier(<>),
	"int" => Value::Integer(<>),
	"str" => Value::String(<>),
	"["<vals: Comma<Value>>"]" => Value::Array(vals),
	Map,
}



Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

NestedIdents: Vec<Ident> = {
  <id:Ident> <rest:(">" <Ident>)*> => {
    let mut idents = vec![id];
    for ident in rest {
      idents.push(ident);
    }
    idents
  }
};

Ident: Ident = {
    <id: "identifier"> => Ident { id }
};



extern {
	type Location = usize;
	type Error = LexicalError;

	enum Token {
		"service" => Token::KwService,
		"resource" => Token::KwResource,
		"operation" => Token::KwOperation,
		"import" => Token::KwImport,
		"from" => Token::KwFrom,
		"extends" => Token::KwExtends,
		"for" => Token::KwFor,
		"create" => Token::KwCreate,
		"read" => Token::KwRead,
		"delete" => Token::KwDelete,
		"update" => Token::KwUpdate,
		"list" => Token::KwList,
		"put" => Token::KwPut,
		">" => Token::Arrow,
		"{" => Token::LBrace,
		"}" => Token::RBrace,
		"[" => Token::LBracket,
		"]" => Token::RBracket,
		":" => Token::Colon,
		"," => Token::Comma,
		"," => Token::Comma,
		"@" => Token::At,
		"-" => Token::Dash,
		"$" => Token::Dollar,
		"identifier" => Token::Identifier(<String>),
		"int" => Token::Integer(<i64>),
		"str" => Token::String(<String>),
	}
}
