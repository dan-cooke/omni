type Operation<Input, Output, Context = {}> = (input: Input, context: Context) => Output;
type HandleFunction<RequestType, ResponseType, Context = {}> = (request: RequestType, context: Context) => ResponseType;
type Handler<RequestType, Context, ResponseType> = {
	handle: HandleFunction<RequestType, Context, ResponseType>;
}

abstract class OmniValue<T> {

	protected value: T;

	abstract get_value(): T;

	constructor(value: T) {
		this.value = value;
	}


}
type HttpRequest = {
	body: any
};
type HttpResponse = {};



function maxLength(value: string) {
	return value.length < 10;
}

class ShortJoke extends OmniValue<string> {
	get_value() {
		if (!maxLength(this.value)) {
			throw Error("{this.name} has length of ${this.value.length}");
		}

		return this.value;
	}
}


interface IJoke {
	joke: ShortJoke;

}

class JokeWrapper extends OmniValue<IJoke> {

	constructor(value: IJoke) {
		super(value);
	}

	get_value() {
		const retValue = {};
		Object.entries(this.value).forEach(([key, value]) => {
			retValue[key] = value.get_value();
		})

		return retValue as IJoke;

	}

	output() {
		return JSON.stringify(this.get_value())

	}

}
type GetRandomJokeInput = undefined;
type GetRandomJokeOutput = IJoke;

export function getGetRandomJokeHandler<Context>(operation: Operation<GetRandomJokeInput, GetRandomJokeOutput, Context>): Handler<HttpRequest, HttpResponse, Context> {

	return {
		handle: (request, context) => {
			const result = new JokeWrapper(operation(undefined, context));
			return result.output();
		}
	}

}
