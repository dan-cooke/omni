type Operation<Input, Output, Context = {}> = (input: Input, context: Context) => Output;
type HandleFunction<RequestType, ResponseType, Context = {}> = (request: RequestType, context: Context) => ResponseType;
type Handler<RequestType, Context, ResponseType> = {
	handle: HandleFunction<RequestType, Context, ResponseType>;
}

function serializeHttpJsonResponse<Output>(output: Output): HttpResponse {
	return JSON.stringify(output);
}

type HttpRequest = {
	body: any
};
type HttpResponse = {};

interface Joke {
	joke: String;
}


type GetRandomJokeInput = undefined;
type GetRandomJokeOutput = Joke;

export function getGetRandomJokeHandler<Context>(operation: Operation<GetRandomJokeInput, GetRandomJokeOutput, Context>): Handler<HttpRequest, HttpResponse, Context> {

	return {
		handle: (request, context) => {
			return serializeHttpJsonResponse(operation(undefined, context));
		}
	}
}

